# Generated by Django 5.0.2 on 2024-04-12 17:37

import core.validators
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('lots', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ID', models.UUIDField(db_index=True, default=uuid.uuid4, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=48, validators=[core.validators.NameValidator()], verbose_name='first name')),
                ('last_name', models.CharField(max_length=48, validators=[core.validators.NameValidator()], verbose_name='last name')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('city', models.CharField(db_index=True, max_length=48, validators=[core.validators.CityValidator()], verbose_name="the user's city")),
                ('age', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100)], verbose_name="user's age")),
                ('purchases', models.PositiveSmallIntegerField(default=0, verbose_name='purchases made by the user')),
                ('sales', models.PositiveSmallIntegerField(default=0, verbose_name='sales made by the user')),
                ('balance', models.IntegerField(default=0, verbose_name="user's balance")),
                ('about', models.TextField(blank=True, verbose_name='about the user')),
                ('avatar', models.ImageField(default='avatars/default.jpg', upload_to='avatars', verbose_name="user's avatar")),
                ('phone', models.CharField(blank=True, max_length=19, validators=[core.validators.PhoneNumberValidator()], verbose_name="the user's phone number")),
                ('active_lots', models.ManyToManyField(related_name='active_lots', to='lots.lots')),
                ('active_purchases', models.ManyToManyField(related_name='active_purchases', to='lots.lots')),
                ('active_sell', models.ManyToManyField(related_name='active_sell', to='lots.lots')),
                ('archive_lots', models.ManyToManyField(related_name='archive_lots', to='lots.archivelots')),
                ('completed_purchases', models.ManyToManyField(related_name='complete_purchases', to='lots.archivelots')),
                ('completed_sell', models.ManyToManyField(related_name='complete_sell', to='lots.archivelots')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
